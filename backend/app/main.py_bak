from fastapi import FastAPI
from typing import Optional
import requests
import os
import math
import random
import folium
import json

app = FastAPI()

def generate_random_point(center_lat_str, center_lng_str, radius_str):
    center_lat = float(center_lat_str)
    center_lng = float(center_lng_str)
    radius = float(radius_str)
    
    radius_in_degrees = radius / 111300 

    random_angle = random.uniform(0, 2 * math.pi)

    # Calculate new coordinates
    new_lat = center_lat + (radius_in_degrees * math.cos(random_angle))
    new_lng = center_lng + (radius_in_degrees * math.sin(random_angle))
    
    return str(new_lat), str(new_lng)

@app.get("/route")
def route(currentLat: str, currentLng: str, radius: str):
    origin = f"{currentLat},{currentLng}"
    url = "https://maps.googleapis.com/maps/api/directions/json?"

    # ランダムな目的地を生成
    destination_lat, destination_lng = generate_random_point(currentLat, currentLng, radius)
    
    # Directions API へのリクエストパラメータの設定
    payload = {
        "origin": origin,
        "destination": f"{destination_lat},{destination_lng}",
        "key": "enter_your_api_key",
        "mode": "walking"
    }

    # Directions API へのリクエストを送信
    r = requests.get(url, params=payload)

    # リクエストが成功した場合
    if r.status_code == 200:
        # JSON データを取得
        data = r.json()

        # ルートの始点と終点の座標を取得
        start_point = (data["routes"][0]["legs"][0]["start_location"]["lat"], data["routes"][0]["legs"][0]["start_location"]["lng"])
        end_point = (data["routes"][0]["legs"][0]["end_location"]["lat"], data["routes"][0]["legs"][0]["end_location"]["lng"])

        # 中心の座標を設定
        center = [(start_point[0] + end_point[0]) / 2, (start_point[1] + end_point[1]) / 2]

        # マップを作成
        m = folium.Map(location=center, zoom_start=16)

        # ルートのポリラインを追加
        points = [(start_point[0], start_point[1]), (end_point[0], end_point[1])]
        folium.PolyLine(points, color="blue", weight=2.5, opacity=1).add_to(m)

        # マップを保存
        m.save("route.html")
        
        return "Route saved as route.html"
    else:
        return "500: Backend error"